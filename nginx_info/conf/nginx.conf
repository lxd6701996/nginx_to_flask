# 是否后台运行
daemon on;
user root;

worker_processes  1;

events {
    worker_connections 1024;
}

http {
    # 定义上游服务器
    upstream app1_backend {
        server 127.0.0.1:5000;
    }

    upstream app2_backend {
        server 127.0.0.1:5001;
    }

    # 必须要写，否则css可以正常访问，页面就是显示不出!!!
    include       mime.types;
    default_type  application/octet-stream;


    error_page  404 = @error_404;

    server {
        listen 80;
        server_name localhost;

        # 处理静态文件请求
        location /app1/static/ {
            alias /root/test_2app_nginx/app1/static/;
            expires 30d;
        }

        location /app2/static/ {
            alias /root/test_2app_nginx/app2/static/;
            expires 30d;
        }

        # 处理应用程序请求
        location /app1/ {
            proxy_pass http://app1_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Script-Name /app1;  # 告知 Flask 它是通过 /app1 访问的
            rewrite ^/app1(/.*)$ $1 break;         # 移除 /app1 前缀
        }

        location /app2/ {
            proxy_pass http://app2_backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Script-Name /app2;  # 告知 Flask 它是通过 /app2 访问的
            rewrite ^/app2(/.*)$ $1 break;         # 移除 /app2 前缀
        }


        location / {
            root   /root/test_2app_nginx/nginx_info/html;  # 确保这里的路径指向你的主页文件所在的目录
            index  index.html index.htm;   # 指定主页文件的名称
        }

        location @error_404 {
            root   /root/test_2app_nginx/nginx_info/html; 
            internal;  # 使该 location 只能在 Nginx 内部访问
            try_files /404.html = 404;  # 使用自定义的 404 页面,如果不存在返回标准的nginx404页面
        }
    }
}